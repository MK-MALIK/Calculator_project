package b;



import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.TilePane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class C extends Application {
    TextField tf = new TextField();
    private long num1;
    private long num2;
    String opp = "";
    private boolean start = true;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {
        StackPane pane = new StackPane();
        tf.setPrefSize(70, 70);
        tf.setAlignment(Pos.CENTER_RIGHT);
        tf.setEditable(false);
        tf.setFont(Font.font(20));
        tf.setBackground(new Background(new BackgroundFill(Color.LIGHTBLUE,CornerRadii.EMPTY,null)));
        pane.getChildren().add(tf);

        TilePane tp = new TilePane();
        tp.setHgap(5);
        tp.setVgap(5);
        tp.setPadding(new Insets(10));
        tp.setPrefSize(100, 100);
        tp.getChildren().addAll(
        		
                createButtonForNumber("7"),
                createButtonForNumber("8"),
                createButtonForNumber("9"),
                createButtonForOperator("/"),
                
                createButtonForNumber("4"),
                createButtonForNumber("5"),
                createButtonForNumber("6"),
                createButtonForOperator("x"),
                
                createButtonForNumber("1"),
                createButtonForNumber("2"),
                createButtonForNumber("3"),
                createButtonForOperator("-"),
                
                createButtonForNumber("0"),
                createButtonForClear("C"),
                createButtonForOperator("="),
                createButtonForOperator("+")
        );

        BorderPane root = new BorderPane();
        root.setTop(pane);
        root.setCenter(tp);

        Scene scene = new Scene(root, 350, 550);
        stage.setScene(scene);
        stage.setTitle("Muhammad Khalil"+" "+"23SW-35");
        stage.show();
    }

    private Button createButtonForNumber(String ch) {
        Button btn = new Button(ch);
        btn.setPrefSize(70, 70);
        btn.setFont(Font.font(30));
        btn.setStyle("-fx-background-color: yellow;");
        btn.setOnAction(this::processNumber);
        return btn;
    }

    private Button createButtonForOperator(String ch) {
        Button btn = new Button(ch);
        btn.setPrefSize(70, 70);
        btn.setFont(Font.font(30));
        btn.setStyle("-fx-background-color: red;");
        btn.setOnAction(this::processOperator);
        return btn;
    }

    private Button createButtonForClear(String ch) {
        Button btn = new Button(ch);
        btn.setPrefSize(70, 70);
        btn.setFont(Font.font(30));
        btn.setStyle("-fx-background-color: red;");
        btn.setOnAction(e -> {
            tf.setText("");
            start = true;
        });
        return btn;
    }

    private void processNumber(ActionEvent e) {
        if (start) {
            tf.setText("");
             opp = "";
            start = false;
        }
        String value = ((Button) e.getSource()).getText();
        tf.setText(tf.getText() + value);
    }

    private void processOperator(ActionEvent e) {
        String value = ((Button) e.getSource()).getText();
        if (!value.equals("=")) {
            if (!opp.isEmpty()) {
                return;
            }
            num1 = Long.parseLong(tf.getText());
            opp = value;
           tf.setText("");
        } else {
            if (opp.isEmpty()) {
                return;
            }
            num2 = Long.parseLong(tf.getText());
            double result = calculate(num1, num2, opp);
            tf.setText(String.valueOf(result));
            opp = "";
            start = true;
        }
    }

    private double calculate(long num1, long num2, String opp) {
        switch (opp) {
            case "+":
                return num1 + num2;
            case "-":
                return num1 - num2;
            case "x":
                return num1 * num2;
            case "/":
                if (num2 == 0) {
                    return 0;
                } else {
                    return num1 / num2;
                }
            case "sin":
                return Math.sin(num1);
                default:return 0;
        }
    }
}
